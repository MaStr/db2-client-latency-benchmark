/****************************************************************************
** (c) Copyright IBM Corp. 2007 All rights reserved.
** 
** The following sample of source code ("Sample") is owned by International 
** Business Machines Corporation or one of its subsidiaries ("IBM") and is 
** copyrighted and licensed, not sold. You may use, copy, modify, and 
** distribute the Sample in any form without payment to IBM, for the purpose of 
** assisting you in the development of your applications.
** 
** The Sample code is provided to you on an "AS IS" basis, without warranty of 
** any kind. IBM HEREBY EXPRESSLY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS OR 
** IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Some jurisdictions do 
** not allow for the exclusion or limitation of implied warranties, so the above 
** limitations or exclusions may not apply to you. IBM shall not be liable for 
** any damages you suffer as a result of using, copying, modifying or 
** distributing the Sample, even if IBM has been advised of the possibility of 
** such damages.
*****************************************************************************
**
** SOURCE FILE NAME: tbsel.sqc
**
** SAMPLE: How to select from each of: insert, update, delete
**
** CREATING TABLES FOR THIS SAMPLE (Must be done prior to compiling/running
** the sample):
** Enter "tbselinit" while in the samples\c directory to create the
** tables used by this sample.  The tbselinit script (UNIX and Linux)
** or tbselinit.bat batch file (Windows) connects to the database,
** runs tbseldrop.db2 to drop the tables if they previously existed, runs
** tbselcreate.db2 which creates the sample tables, then disconnects from
** the database.  Note that this is done automatically when you build the
** client application "spclient" using the appropriate "make" utility for
** your Operating System, and use the "makefile" provided with these
** samples.
**
** SQL STATEMENTS USED:
**         INCLUDE
**         CREATE TABLE
**         INSERT
**         SELECT FROM INSERT
**         SELECT FROM UPDATE
**         SELECT FROM DELETE
**         PREPARE
**         DROP TABLE
**
** OUTPUT FILE: tbsel.out (available in the online documentation)
*****************************************************************************
**
** For more information on the sample programs, see the README file.
**
** For information on developing C applications, see the Application
** Development Guide.
**
** For information on using SQL statements, see the SQL Reference.
**
** For the latest information on programming, building, and running DB2
** applications, visit the DB2 application development website:
**     http://www.software.ibm.com/data/db2/udb/ad
****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include <stdio.h>
#include <stdlib.h>
#include <sqlenv.h>
#include <sqlda.h>
#include <sqlca.h>
#include <string.h>
#include <ctype.h>

#include <stdio.h>
#include <stdlib.h>
#include <sql.h>
#include <sqlenv.h>
#include <sqlda.h>
#include <sqlca.h>
#include <string.h>
#include <ctype.h>

#include <sched.h>

#include <sys/time.h>
#include <time.h>

#include "utilemb.h"
#include "utilapi.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
  short id;         /* Employee's ID */
  short department; /* Employee's department */
  short years;      /* Number of years employee has worked with the
                       company */
  short new_id;     /* Employee's new ID when they switch companies */

  char cur_ts[26]  ;  

  char strStmt[512]; /* SQL statement to be executed */
  char name[10];     /* Employee's name */
  char job[6];       /* Employee's job title */
  char benefits[50]; /* Employee's benefits */

  double salary;      /* Employee's current salary */
  double old_salary;  /* Employee's old salary */

  char dbSchema[12];
EXEC SQL END DECLARE SECTION;


int main(int argc, char *argv[])
{
  unsigned int i  = 0;
  unsigned int rounds = 1000000;
  unsigned int stat_round = 1000;
  int rc = 0;
  int avg_cnt, peak_cnt,cpu_mig_cnt;

  int cpu, last_cpu;

  /* statistic counters */
  time_t curtime ;
  struct timeval lstart, lende, lzwalt, lzwneu, laufzeit, tstmp,lpeak, l_peak_diff ;
  clock_t start , end , zwalt, zwneu ;
  double time_elapsed_in_useconds ; 
  float   min,max,avg_sum,avg,cal,last_cal,peak_cal,peak_distance_avg,peak_distance_sum;
  char    buffer[30];
  

  char dbAlias[SQL_ALIAS_SZ + 1];
  char user[USERID_SZ + 1];
  char pswd[PSWD_SZ + 1];

  /* Check the command line arguments. */
  rc = CmdLineArgsCheck3(argc, argv, dbAlias, dbSchema, user, pswd);
  if (rc != 0)
    return rc;

  printf("\nPerforming %d SINGLE-SELECT against Database %s\n",rounds,dbAlias);

  /* Connect to database. */
  rc = DbConn(dbAlias, user, pswd);
  if (rc != 0)
    return rc;

  EXEC SQL SET CURRENT PACKAGE PATH = :dbSchema ;
  EMB_SQL_CHECK("Set Package Path failed");

  start = clock();
  gettimeofday(&lstart, NULL);
  curtime=lstart.tv_sec;
  strftime(buffer,30,"%d.%m.%Y  %T.",localtime(&curtime));
  printf("Startzeit: %s%ld \n",buffer,lstart.tv_usec);
  lzwalt = lstart;
  zwalt = start;

  avg_sum=0;
  avg_cnt=0;
  peak_cnt=0;
  peak_distance_avg=0;
  peak_distance_sum=0;
  cpu_mig_cnt=0;

  for ( i = 1 ; i <= rounds ; ++i )
  {
    EXEC SQL SELECT CURRENT_TIMESTAMP INTO :cur_ts from SYSIBM.SYSDUMMY1 WITH UR;
    EMB_SQL_CHECK("SELECT");

    if (  i % stat_round == 0)
    /* if ( 0 == 0 ) */
    {
      zwneu = clock();
      time_elapsed_in_useconds = (zwneu - zwalt)/(double)CLOCKS_PER_SEC;
      zwalt = zwneu;
      gettimeofday(&lzwneu, NULL);
      timersub(&lzwneu, &lzwalt, &laufzeit);
      lzwalt = lzwneu;

      cal = laufzeit.tv_sec + (laufzeit.tv_usec/1000000.0)  ;

      cpu = sched_getcpu();

      avg_sum=avg_sum+cal;
      avg_cnt++;
      if ( i == stat_round ) 
      {
	/* Initialize min/max */
        min = cal;
        max = cal;
	last_cpu = cpu;
      } else {
	if ( cal < min )
	{
		min = cal;
	}
	if ( cal > max ) 
	{
		max = cal;
	}

      	printf("Round %#7d ,  %.6fs,%i",i, cal,cpu );
	/* Find Peaks 2times above the last value */
	if ( cal > ( 2 * ( avg_sum/avg_cnt)))
	{
		printf(" ,***** PEAK ******,");
		if ( peak_cnt > 0 ) {
			timersub(&lzwneu,&lpeak,&l_peak_diff);
			peak_cal = l_peak_diff.tv_sec + (l_peak_diff.tv_usec/1000000.0)  ;
			printf(" %.6fs ,",peak_cal);
			peak_distance_sum=peak_distance_sum+peak_cal;
		}
		lpeak=lzwneu;
		peak_cnt++;
	}
	if ( last_cpu != cpu ) {
		cpu_mig_cnt++;
	}
	printf("\n");
	
      }
    }
  }



  gettimeofday(&lende, NULL);
  timersub(&lende, &lstart, &laufzeit);
  cal = laufzeit.tv_sec + (laufzeit.tv_usec/1000000.0)  ;

  avg=avg_sum/avg_cnt;

	
  printf ( "CSV vals: runtime in s, min time per %i in s, max time per %i in s, average per %i in s;cpu_migrations;amount of peak; average distance between peaks\n", stat_round , stat_round ,stat_round );
  printf ( "CSV-stat-per-%i;%0.3f;%0.5f;%0.5f;%0.5f;%i;",stat_round , cal , min, max ,avg,cpu_mig_cnt );
  if ( peak_cnt > 0 ) {
	peak_distance_avg=peak_distance_sum / peak_cnt;
	printf ("%i;%0.3f;\n",peak_cnt,peak_distance_avg);
  } else {
	printf ("%i;;\n",peak_cnt);
  }

  /* Disconnect from database. */
  rc = DbDisconn(dbAlias);
  if (rc != 0)
    return rc;
  return 0;
} /* Main */

